trigger: none

pool:
  vmImage: 'ubuntu-latest'

steps:
  - checkout: self

  - script: |
      npm install -g tfx-cli
    displayName: 'Install tfx-cli'

  - script: |
      PATCH=$(cat Patch.txt)
      PATCH=$((PATCH + 1))
      echo $PATCH > Patch.txt
    displayName: 'Increment Patch version'

  - script: |
      VERSION=$(cat Major.txt).$(cat Minor.txt).$(cat Patch.txt)
      jq '.version = "'$VERSION'"' vss-extension.json > temp.json && mv temp.json vss-extension.json
    displayName: 'Update version based on repository tag'

  - script: |
      MAJOR=$(cat Major.txt)
      MINOR=$(cat Minor.txt)
      PATCH=$(cat Patch.txt)
      jq '.version.Major = '$MAJOR'' buildandreleasetask/TerraformDrift/task.json > temp.json && mv temp.json buildandreleasetask/TerraformDrift/task.json
      jq '.version.Minor = '$MINOR'' buildandreleasetask/TerraformDrift/task.json > temp.json && mv temp.json buildandreleasetask/TerraformDrift/task.json
      jq '.version.Patch = '$PATCH'' buildandreleasetask/TerraformDrift/task.json > temp.json && mv temp.json buildandreleasetask/TerraformDrift/task.json
    displayName: 'Update task.json version based on Major, Minor and Patch files'

  - script: |
      cd $(System.DefaultWorkingDirectory)/buildandreleasetask/TerraformDrift
      npm install
      webpack
    displayName: 'Build webpack'

  - script: |
      tfx extension create --manifest-globs vss-extension.json
    displayName: 'Build Extension'

  - script: |
      tfx extension publish --manifest-globs vss-extension.json --token $(PAT)
    displayName: 'Publish Extension'

  - script: |
      rm -f *.vsix
    displayName: 'Remove .vsix files'

  - script: |
      git config --global user.email "subzone@live.com"
      git config --global user.name "Milenko Mitrovic"
      git remote set-url origin https://github.com/subzone/TerraformDrifter.git
      git add .
      whoami
      VERSION=$(cat Major.txt).$(cat Minor.txt).$(cat Patch.txt)
      git tag $VERSION
      git commit -m "Update version based on repository tag"
      git push origin HEAD:master
      git push origin --tags
    displayName: 'Commit to master branch'

  - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: $(VERSION)
        release_name: Release $(VERSION)
        draft: false
        prerelease: false
  

  