"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asyncMockedRun = exports.mockedRun = exports.mockConsoleLog = exports.mockProcessUptime = exports.mockProcessStderr = exports.mockProcessStdout = exports.mockProcessExit = exports.spyOnImplementing = void 0;
var maybeMockRestore = function (a) {
    return a.mockRestore && typeof a.mockRestore === "function"
        ? a.mockRestore()
        : undefined;
};
/**
 * Helper function for manually creating new spy mocks of functions not supported by this module.
 *
 * @param target Object containing the function that will be mocked.
 * @param property Name of the function that will be mocked.
 * @param impl Mock implementation of the target's function. The return type must match the target function's.
 */
function spyOnImplementing(target, property, impl) {
    maybeMockRestore(target[property]);
    return jest.spyOn(target, property).mockImplementation(impl);
}
exports.spyOnImplementing = spyOnImplementing;
/**
 * Helper function to create a mock of the Node.js method
 * `process.exit(code: number)`.
 *
 * @param {Object} err Optional error to raise. If unspecified or falsy, calling `process.exit` will resume code
 * execution instead of raising an error.
 */
var mockProcessExit = function (err) {
    return spyOnImplementing(process, "exit", (err
        ? function () {
            throw err;
        }
        : function () { }));
};
exports.mockProcessExit = mockProcessExit;
/**
 * Helper function to create a mock of the Node.js method
 * `process.stdout.write(text: string, callback?: function): boolean`.
 */
var mockProcessStdout = function () {
    return spyOnImplementing(process.stdout, "write", function () { return true; });
};
exports.mockProcessStdout = mockProcessStdout;
/**
 * Helper function to create a mock of the Node.js method
 * `process.stderr.write(text: string, callback?: function): boolean`.
 */
var mockProcessStderr = function () {
    return spyOnImplementing(process.stderr, "write", function () { return true; });
};
exports.mockProcessStderr = mockProcessStderr;
/**
 * Helper function to create a mock of the Node.js method
 * `process.uptime()`.
 */
var mockProcessUptime = function (value) {
    return spyOnImplementing(process, "uptime", function () { return value !== null && value !== void 0 ? value : 0; });
};
exports.mockProcessUptime = mockProcessUptime;
/**
 * Helper function to create a mock of the Node.js method
 * `console.log(message: any)`.
 */
var mockConsoleLog = function () { return spyOnImplementing(console, "log", function () { }); };
exports.mockConsoleLog = mockConsoleLog;
/**
 * Helper function to run a synchronous function with provided mocks in place, as a virtual environment.
 *
 * Every provided mock will be automatically restored when this function returns.
 */
function mockedRun(callers) {
    return function (f) {
        var mocks = {
            mocks: {},
        };
        var mockers = Object.entries(callers)
            .map(function (_a) {
            var _b;
            var k = _a[0], caller = _a[1];
            return (_b = {}, _b[k] = caller(), _b);
        })
            .reduce(function (o, acc) { return Object.assign(acc, o); }, {});
        try {
            mocks.result = f();
        }
        catch (error) {
            mocks.error = error;
        }
        Object.entries(mockers).map(function (_a) {
            var k = _a[0], mocker = _a[1];
            mocks.mocks[k] = Object.assign({}, mocker);
            maybeMockRestore(mocker);
        });
        return mocks;
    };
}
exports.mockedRun = mockedRun;
/**
 * Helper function to run an asynchronous function with provided mocks in place, as a virtual environment.
 *
 * Every provided mock will be automatically restored when this function returns.
 */
function asyncMockedRun(callers) {
    var _this = this;
    return function (f) { return __awaiter(_this, void 0, void 0, function () {
        var mocks, mockers, _a, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    mocks = {
                        mocks: {},
                    };
                    mockers = Object.entries(callers)
                        .map(function (_a) {
                        var _b;
                        var k = _a[0], caller = _a[1];
                        return (_b = {}, _b[k] = caller(), _b);
                    })
                        .reduce(function (o, acc) { return Object.assign(acc, o); }, {});
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    _a = mocks;
                    return [4 /*yield*/, f()];
                case 2:
                    _a.result = _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _b.sent();
                    mocks.error = error_1;
                    return [3 /*break*/, 4];
                case 4:
                    Object.entries(mockers).map(function (_a) {
                        var k = _a[0], mocker = _a[1];
                        mocks.mocks[k] = Object.assign({}, mocker);
                        maybeMockRestore(mocker);
                    });
                    return [2 /*return*/, mocks];
            }
        });
    }); };
}
exports.asyncMockedRun = asyncMockedRun;
